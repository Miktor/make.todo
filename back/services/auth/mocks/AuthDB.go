// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Miktor/make.todo/back/cmd/auth/models"

	testing "testing"
)

// AuthDB is an autogenerated mock type for the AuthDB type
type AuthDB struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *AuthDB) Close() {
	_m.Called()
}

// LoginUser provides a mock function with given fields: ctx, user
func (_m *AuthDB) LoginUser(ctx context.Context, user *models.UserInfo) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserInfo) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterUser provides a mock function with given fields: ctx, user
func (_m *AuthDB) RegisterUser(ctx context.Context, user *models.UserInfo) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserInfo) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthDB creates a new instance of AuthDB. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthDB(t testing.TB) *AuthDB {
	mock := &AuthDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
